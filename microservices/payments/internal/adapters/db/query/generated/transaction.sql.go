// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaction.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO ` + "`" + `transaction` + "`" + ` (
    id, payer_id, amount, completed_at, created_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateTransactionParams struct {
	ID          string       `json:"id"`
	PayerID     string       `json:"payer_id"`
	Amount      string       `json:"amount"`
	CompletedAt sql.NullTime `json:"completed_at"`
	CreatedAt   time.Time    `json:"created_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransaction,
		arg.ID,
		arg.PayerID,
		arg.Amount,
		arg.CompletedAt,
		arg.CreatedAt,
	)
}

const getOneTransactionById = `-- name: GetOneTransactionById :one
SELECT id, payer_id, amount, completed_at, created_at
FROM ` + "`" + `transaction` + "`" + `
WHERE id LIKE $1
`

func (q *Queries) GetOneTransactionById(ctx context.Context) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getOneTransactionById)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PayerID,
		&i.Amount,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}
