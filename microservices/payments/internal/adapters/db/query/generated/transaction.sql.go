// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: transaction.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO ` + "`" + `transaction` + "`" + ` (
    id, payer_id, status, amount, completed_at, created_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateTransactionParams struct {
	ID          string       `json:"id"`
	PayerID     string       `json:"payer_id"`
	Status      string       `json:"status"`
	Amount      string       `json:"amount"`
	CompletedAt sql.NullTime `json:"completed_at"`
	CreatedAt   time.Time    `json:"created_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransaction,
		arg.ID,
		arg.PayerID,
		arg.Status,
		arg.Amount,
		arg.CompletedAt,
		arg.CreatedAt,
	)
}

const getManyTransactionsByPayerId = `-- name: GetManyTransactionsByPayerId :many
SELECT id, payer_id, amount, status, completed_at, created_at
FROM ` + "`" + `transaction` + "`" + `
WHERE payer_id LIKE ?
`

func (q *Queries) GetManyTransactionsByPayerId(ctx context.Context, payerID string) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getManyTransactionsByPayerId, payerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.PayerID,
			&i.Amount,
			&i.Status,
			&i.CompletedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneTransactionById = `-- name: GetOneTransactionById :one
SELECT id, payer_id, amount, status, completed_at, created_at
FROM ` + "`" + `transaction` + "`" + `
WHERE id LIKE ?
`

func (q *Queries) GetOneTransactionById(ctx context.Context, id string) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getOneTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PayerID,
		&i.Amount,
		&i.Status,
		&i.CompletedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :execresult
UPDATE ` + "`" + `transaction` + "`" + `
SET status = ?, completed_at = ?
WHERE id = ?
`

type UpdateTransactionStatusParams struct {
	Status      string       `json:"status"`
	CompletedAt sql.NullTime `json:"completed_at"`
	ID          string       `json:"id"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTransactionStatus, arg.Status, arg.CompletedAt, arg.ID)
}
