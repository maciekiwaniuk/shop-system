// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payer.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createPayer = `-- name: CreatePayer :execresult
INSERT INTO payer (
    id, email, name, surname, updated_at, created_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreatePayerParams struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	Surname   string    `json:"surname"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreatePayer(ctx context.Context, arg CreatePayerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPayer,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Surname,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
}

const getOnePayerById = `-- name: GetOnePayerById :one
SELECT id, email, name, surname, updated_at, created_at
FROM payer
WHERE id = $1
`

func (q *Queries) GetOnePayerById(ctx context.Context) (Payer, error) {
	row := q.db.QueryRowContext(ctx, getOnePayerById)
	var i Payer
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Surname,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
